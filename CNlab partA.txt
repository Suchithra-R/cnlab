
2)ip
#include<stdio.h>
#include<string.h>

int valid(char ip[])
{
	int n=strlen(ip), val=0, i=0, nod=0;
	if(ip[0]=='0' && ip[1]!='.')
		return 0;
	while(i<n)
	{
		val=0;
		while(i<n && ip[i]!='.')
		{
			val=val*10;
			val+=(ip[i]-'0');
			i++;
		}
		if(ip[i]=='.')
			nod++;
		if(ip[i]=='.' && ip[i+1]=='0' && (i+1)!=n && ip[i+2]!='.')
			return 0;
		if(val>255)
			return 0;
		if(nod>3)
			return 0;
		i++;
	}
	return 1;
}

char findClass(char str[])
{
	char arr[4];
	int i = 0;
	while (str[i] != '.')
	{
		arr[i] = str[i];
		i++;
	}
	i--;

	
	int ip = 0, j = 1;
	while (i >= 0)
	{
		ip = ip + (str[i] - '0') * j;
		j = j * 10;
		i--;
	}

	
	if (ip >=1 && ip <= 126)
		return 'A';

	
	else if (ip >= 128 && ip <= 191)
		return 'B';

	
	else if (ip >= 192 && ip <= 223)
		return 'C';

	
	else if (ip >= 224 && ip <= 239)
		return 'D';

	else
		return 'E';
}

void separate(char str[], char ipClass)
{
	
	char network[12], host[12];
	for (int k = 0; k < 12; k++)
		network[k] = host[k] = '\0';

	
	if (ipClass == 'A')
	{
		int i = 0, j = 0;
		while (str[j] != '.')
			network[i++] = str[j++];
		i = 0;
		j++;
		while (str[j] != '\0')
			host[i++] = str[j++];
		printf("Network ID is %s\n", network);
		printf("Host ID is %s\n", host);
	}

	
	else if (ipClass == 'B')
	{
		int i = 0, j = 0, dotCount = 0;

		while (dotCount < 2)
		{
			network[i++] = str[j++];
			if (str[j] == '.')
				dotCount++;
		}
		i = 0;
		j++;

		while (str[j] != '\0')
			host[i++] = str[j++];

		printf("Network ID is %s\n", network);
		printf("Host ID is %s\n", host);
	}

	
	else if (ipClass == 'C')
	{
		int i = 0, j = 0, dotCount = 0;

	
		while (dotCount < 3)
		{
			network[i++] = str[j++];
			if (str[j] == '.')
				dotCount++;
		}

		i = 0;
		j++;

		while (str[j] != '\0')
			host[i++] = str[j++];

		printf("Network ID is %s\n", network);
		printf("Host ID is %s\n", host);
	}

	
	else
		printf("In this Class, IP address is not"
		" divided into Network and Host ID\n");
}
	
int main()
{
	char str[18]; 
	printf("Enter ip address:\n");
	scanf("%s", str);
	if(valid(str)==0)
		printf("Invalid\n");
		return;

	char ipClass = findClass(str);
	printf("Given IP address belongs to Class %c\n",ipClass);
	separate(str, ipClass);
	return 0;
}


3a) goback
#include<stdio.h>
#include<time.h>

void transmission(int i,int n,int tf)
{
        while (i <= tf)
        {
                int z = 0,k;
                for (k = i; k < i + n && k <= tf; k++)
                        printf("Sending frame %d\n",k);
                for (k = i; k < i + n && k <= tf; k++)
                {
                        int f = rand() % 4;
                        if (!f)
                        {
                                printf("Acknowledgement for frame %d\n",k);
                                z++;
                        }
                        else
                        {
                                printf("Frame %d not received\n",k);
                                printf("Retransmitting\n");
                                break;
                        }
                }
                printf("\n");
                i=i+z;
        }
}

int main()
{
        int tf,n,i=1;
        srand(time(NULL));
        printf("Enter the total number of frames\n");
        scanf("%d",&tf);
        printf("Enter the window size\n");
        scanf("%d",&n);
        transmission(i,n,tf);
        return 0;
}




3b)selective repeat
#include<stdio.h>
#include<stdlib.h>

int n,r;
struct frame
{
        char ack;
        int data;
}frm[10];


void sender()
{
        int i;
        printf("\nEnter the no. of packets to be sent:");
        scanf("%d",&n);
        for(i=1;i<=n;i++)
        {
                printf("\nEnter data for packets[%d]: ",i);
                scanf("%d",&frm[i].data);
                frm[i].ack='y';
        }
}
void recvack()
{
        int i;
        r=rand()%n;
        frm[r].ack='n';
        for(i=1;i<=n;i++)
        {
                if(frm[i].ack=='n')
                        printf("\nThe packet number %d is not received\n",r);
                else
                        printf("\nThe packet number %d is recieved having data %d\n",i,frm[i].data);
        }
}
void resend()
{
        printf("\nResending packet %d",r);
        sleep(2);
        frm[r].ack='y';
        printf("\nThe received packet is %d having data %d",r,frm[r].data);
}
int main()
{
        sender();
        recvack();
        resend();
        printf("\nAll packets sent successfully\n");
        return 0;
}

3c)stop wait
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
int frames,nak,timeExp,i,flag=0;
printf("Enter no. of frames\n");
scanf("%d",&frames);
nak=rand()%frames;
timeExp=rand()%frames;
for(i=1;i<=frames;i++)
{
printf("Sending frame %d\n",i);
if(i==nak)
{
printf("Acknowledgement for frame %d not recieved.\nResending the frame\n",i);
}
sleep(2);
if(i==timeExp)
        printf("Timer expired\nResending the frame\n");
printf("Acknowledgement for frame %d recieved\n",i);
}
return 0;

}


4)berllman ford
#include <stdio.h>
#include <stdlib.h>
int Bellman_Ford(int G[20][20] , int V, int E, int edge[20][2])
{
    int i,u,v,k,distance[20],parent[20],S,flag=1;
    for(i=0;i<V;i++)
        distance[i] = 1000 , parent[i] = -1 ;
        printf("Enter source: ");
        scanf("%d",&S);
        distance[S-1]=0 ;
    for(i=0;i<V-1;i++)
    {
        for(k=0;k<E;k++)
        {
            u = edge[k][0] , v = edge[k][1] ;
            if(distance[u]+G[u][v] < distance[v])
                distance[v] = distance[u] + G[u][v] , parent[v]=u ;
        }
    }
    for(k=0;k<E;k++)
        {
            u = edge[k][0] , v = edge[k][1] ;
            if(distance[u]+G[u][v] < distance[v])
                flag = 0 ;
        }
        if(flag)
            for(i=0;i<V;i++)
                printf("Vertex %d -> cost = %d parent = %d\n",i+1,distance[i],parent[i]+1);

        return flag;
}
int main()
{
    int V,edge[20][2],G[20][20],i,j,k=0;
    printf("BELLMAN FORD\n");
    printf("Enter no. of vertices: ");
    scanf("%d",&V);
    printf("Enter graph in matrix form:\n");
    for(i=0;i<V;i++)
        for(j=0;j<V;j++)
        {
            scanf("%d",&G[i][j]);
            if(G[i][j]!=0)
                edge[k][0]=i,edge[k++][1]=j;
        }

    if(Bellman_Ford(G,V,k,edge))
        printf("\nNo negative weight cycle\n");
    else printf("\nNegative weight cycle exists\n");
    return 0;
}


5) client server

//server
import socket
def server_program():
        host = socket.gethostname()
        port = 1098
        server_socket = socket.socket()
        server_socket.bind((host, port))
        server_socket.listen(2)
        conn, address = server_socket.accept()
        print("Connection from: " + str(address))
        while True:

                data = conn.recv(1024).decode()
                if not data:
                        break
                else:
                        print("The message recieved from the client is : " + str(data))
                        data=data.upper()
                        print("The message sending back to the client is : " + str(data))
                        conn.send(data.encode())
        conn.close()

if __name__ == '__main__':
        server_program()


//client
import socket
def client_program():

        host = socket.gethostname()
        port = 1098
        client_socket = socket.socket()
        client_socket.connect((host, port))
        message = raw_input("Enter the String : ")

        while message.lower().strip() != 'exit':

                client_socket.send(message.encode())
                data = client_socket.recv(1024).decode()
                print('Received from server: ' + data)
                message = raw_input("Enter the string : ")
        client_socket.close()


if __name__ == '__main__':
        client_program()




6) hamming code
#include<stdio.h>

void main() {
    int data[10];
    int dataatrec[10],c,c1,c2,c3,i;

    printf("Enter 4 bits of data\n");
    scanf("%d",&data[0]);
    scanf("%d",&data[1]);
    scanf("%d",&data[2]);
    scanf("%d",&data[4]);

    data[6]=data[0]^data[2]^data[4];
data[5]=data[0]^data[1]^data[4];
data[3]=data[0]^data[1]^data[2];

printf("\nEncoded data is\n");
for(i=0;i<7;i++)
        printf("%d",data[i]);

    printf("\n\nEnter received data bits one by one\n");
    for(i=0;i<7;i++)
        scanf("%d",&dataatrec[i]);

    c1=dataatrec[6]^dataatrec[4]^dataatrec[2]^dataatrec[0];
c2=dataatrec[5]^dataatrec[4]^dataatrec[1]^dataatrec[0];
c3=dataatrec[3]^dataatrec[2]^dataatrec[1]^dataatrec[0];
c=c3*4+c2*2+c1 ;

    if(c==0) {
printf("\nNo error while transmission of data\n");
    }
else {
printf("\nError on position %d from right",c);


printf("\nCorrect message is\n");

if(dataatrec[7-c]==0)
dataatrec[7-c]=1;
        else
dataatrec[7-c]=0;
for (i=0;i<7;i++) {
printf("%d",dataatrec[i]);
}
}
printf("\n");
}






